use core;
use io;
use json;
use webclient;

class RepoManager {
    func RepoManager (self, filename) {
        self.filename = filename;
        self.repoData = hashMap ();
        try {
            self._openFile ();
        }
        except (e) {
            print (filename);
            directoryArray = filename.split("/");
            directoryArray = directoryArray.splice (0, directoryArray.getSize () 
                                                    - 1);
            dir = "/".join (directoryArray);
            print ("Couldn't find .ion directory, creating {}".format(dir));
            io.Directory.create (dir);
            print ("Adding repository \"Default\"");
            self._openFile ();
            self.addRepo ("Default", "http://iodinelang.github.io/Ion-Default-Repo");
            self.file.close ();
            self._openFile ();
        }
    }
    
    func _openFile (self) {
        self.file = open (self.filename, "rw");
        data = self.file.readAllText ();
        if (data == null || data == "") {
            data = "{}";
        }
        self.repoData = json.parse (data);
    }
    
    func getAllRepos (self) {
        foreach (repo in self.repoData) {
            print (repo["name"]);
        }
    }
    
    func search (self, pkgName) {
        results = list ();
        
        foreach (repo in self.repoData) {
            try {
                repoUrl = self.repoData [repo];
                packageUrl = "{}/{}.json".format (repoUrl ["url"], pkgName);
                pkgDef = webclient.WebClient ().downloadString (packageUrl);
                pkgData = json.parse (pkgDef);
                pkgData ["repo"] = repo;
                pkgData ["version"] = "v{}.{}.{}".format (
                                      pkgData ["versionMajor"], 
                                      pkgData ["versionMinor"], 
                                      pkgData ["versionPatch"]);
                                      
                results.add (pkgData);
            }
            except (e) {
                if (e.message != "Server returned HTTP 404") {
                    raise (e.message);
                }
            }
        }
        
        return results;
    }
    
    func addRepo (self, repoName, repoUrl) {
        repo = hashMap();
        
        # Normalize URLs
        
        if (repoUrl.endsWith ("/")) {
            repoUrl = repoUrl.substr (0, repoUrl.getSize() - 1);
        }
        repo ["url"] = repoUrl;
        
        self.repoData [repoName] = repo;
        self.updateRepoFile ();
    }
    
    func deleteRepo (self, repoName) {
        try {
            self.repoData.remove(repoName);
            self.updateRepoFile ();
            return true;
        }
        except (e as KeyNotFoundException) {
            return false;
        }
    }
    
    func updateRepoFile (self) {
        data = json.dump (self.repoData);
        self.file.close ();
        io.File.remove (self.filename);
        self._openFile ();
        self.file.write (data);
    }
}
