use os
use sys
use ion
use json
use curses
use fsutils
use inspect
use ArgumentParser from argparse

fileMgr = ion.IonFileManager () 
dataMgr = ion.DataManager ()

func canonicalize_name (name) => "".join (name.lower().filter (lambda (p) => p.isalnum())).lower ()

func create_template (file) {
    with (fd = open(file, "w")) {
        fd.writeln ("func main (args) {")
        fd.writeln ("    print ('Hello, World!')")
        fd.writeln ("}")
    }
}

func perform_dependency_check () {
    ionFile = json.parse (fsutils.read ("./ionfile.json"))
  
    for (dep, ver in ionFile['dependencies']) {
        if (!fsutils.isfile ("./src/.deps/data/#{dep}.json")) {
            res = ion.Installer (dep).install (ver)
        }
        
    }
}


func main(args) {
    
    curses.init_pair (0, curses.COLOR_CYAN, 0)
    curses.init_pair (1, curses.COLOR_WHITE, 0)
    curses.init_pair (2, curses.COLOR_YELLOW, 0)
    curses.init_pair (3, curses.COLOR_GREEN, 0)
    

    parser = ArgumentParser ()

    parser.add ("verb")
    parser.add ("package")

    result = parser.parse (args)
    

    match result ["verb"] {
        case "list-installed" {
            items = dataMgr.getAll()

            for (item, info in items) {
                print ('{} {}'.format (item, info['version']))
                for (dep in info['dependencies']) {
                    print ('|- {} {}'.format (dep, info['dependencies'][dep]))
                }
            }

        }   
        case "install" {
            pkgs = ion.Installer (result ["package"]).install ()
            
            for (pkg, ver in pkgs) {
                fileMgr.addDep (pkg, ver)
            }
            
            ion.print_task ('Installation complete.')
        }
        case "install-deps" {
            ion.print_task ("Installing dependencies")
            
            perform_dependency_check ()            
        }
        case "uninstall" {
            pkgs = ion.Uninstaller (result ["package"]).uninstall ()
            fileMgr.removeDep (result ["package"])
            ion.print_task ('Removal complete.')
        }
        case "init" {
            name = input ("package name: ")
            
            ion.print_task ('Initializing ion project')
            
            ion.print_subtask ('Creating src directory')
            
            os.mkdir ('./src');
            
            ion.print_subtask ('Creating ionfile.json')
           
            canonical_name = "src/{}.id".format (canonicalize_name(name))
            
            create_template (canonical_name)

            fileMgr.create (canonical_name, name)
            
            ion.print_task ('Done!')
        }
        case "run" {
            
            perform_dependency_check ()
            
            name = fileMgr.getPackageName ()
            entryPoint = fileMgr.getEntrypoint ()

            ion.print_task ("Running package #{name}")
            ion.print_subtask ("Loading #{entryPoint}")
            
            module = inspect.loadmodule (entryPoint)

            print ("")
            
            module ()

            if (inspect.hasattribute (module, "main")) {
                module.main (List ())
            }
        }
        case Something {
            print ("Unregonized option #{result['verb']}")
        }
    }
}
