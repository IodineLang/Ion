use CommandLineOptions from argparse;
use io;
use ion;
use json;

func main(args) {
    print('Ion ({})'.format(ion.VERSION));
    print('Visit http://github.com/IodineLang/Ion for support');
    print('See the LICENSE file for legal information. (MIT License)');
    print('');
    options = CommandLineOptions();

    installOptions = CommandLineOptions();
    installOptions.addArgument('package');
    installOptions.addOption('save', 'no', false);

    options.addVerb('install', installOptions, lambda(args) => {
        pkgs = ion.Installer(args.package).install();

        if (args.save != 'no') {
            print('UPDATE ionfile.json');
            ion.IonFileManager().addDep(args.package, pkgs[args.package]);
        }

        print('');
        print('Installation complete. Installed:');
        foreach (pkg in pkgs) {
            print('{} {}'.format(pkg, pkgs[pkg]));
        }
    });

    options.addVerb('install-deps', CommandLineOptions(), lambda(args) => {
        ionFile = json.parse(open('./ionfile.json', 'r').readAllText());
        pkgs = {};
        installLoc = './.deps';
        if (ionFile.contains('dependencyLocation')) {
            # dependencyLocation should be something like 'src/'
            installLoc = './{}.deps'.format(ionFile['dependencyLocation']);
        }

        foreach(dep in ionFile['dependencies']) {
            ver = ionFile['dependencies'][dep];
            res = ion.Installer(dep, installLoc).install(ver);
            foreach (pkg in res) {
                pkgs[pkg] = res[pkg];
            }
        }

        print('');
        print('Installation complete. Installed:');
        foreach (pkg in pkgs) {
            print('{} {}'.format(pkg, pkgs[pkg]));
        }
    });

    options.addVerb('init', CommandLineOptions(), lambda(args) => {
        print('Creating src directory');
        io.Directory.create('./src');
        print('Creating ionfile.json');
        ion.IonFileManager().create();
        print('Installing espresso test library');
        testLib = 'espresso';
        pkgs = ion.Installer(testLib).install();
        ion.IonFileManager().addDep(testLib, pkgs[testLib]);
        print('Done!');
    });

    options.addVerb('uninstall', installOptions, lambda(args) => {
        pkgs = ion.Uninstaller(args.package).uninstall();

        print('Removal complete.');
    });

    options.addVerb('list-installed', CommandLineOptions(), lambda(args) => {
        items = ion.DataManager().getAll();

        foreach (item in items) {
            print ('{} {}'.format(item, items[item]['version']));
            foreach (dep in items[item]['dependencies']) {
                print ('|- {} {}'.format(dep, items[item]['dependencies'][dep]));
            }
        }
    });

    options.addVerb('help', CommandLineOptions(), lambda(args) => {
        print('Arguments with <> are required. [] indicates optional.');
        print('help - prints this!');
        print('install <package> - installs the specified package to ./.deps');
        print('install-deps - installs all dependencies listed in ionfile.json');
        print('uninstall <package> - uninstalls the specified package (unless' +
              ' it is required by something else)');
    });

    argparse.parseArgs(options, args);
}
